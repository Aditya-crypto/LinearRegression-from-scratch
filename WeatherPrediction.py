# -*- coding: utf-8 -*-
"""A2q4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NDsd5RsuwnllNTwyPSCs_68aBjqrjH2c
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns 
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import r2_score

class Weather:
    
    parameters=[]
    columns=[]
    def __init__(self):
        pass
        
    def train(self,path):
        df=pd.read_csv(path)
        n1,c1=df.shape
        actual_labels=df['Apparent Temperature (C)']
        mean_v=df['Apparent Temperature (C)'].mean()
        df=df.drop(['Formatted Date', 'Daily Summary','Apparent Temperature (C)'], axis=1)
        df=pd.get_dummies(df)
        li=[1.0]*n1
        self.columns=df.columns
        scaler = StandardScaler()
        df=scaler.fit_transform(df)
        df=pd.DataFrame(df)
        df.insert(0,"const",li,True)
        df=np.array(df)
        n,c=df.shape
        print(df.shape)
        self.find_parameters(df,actual_labels,n,c)
    
    def find_parameters(self,X_train,y_train,n,c):
      self.parameters = np.random.rand(c)
      alpha=0.04
      for j in range(0,1000):
        # predlist=X_train.dot(self.parameters)
        # predlist=predlist-y_train
        # df1=np.transpose(X_train)
        # intermediate= np.dot(df1,predlist)
        # intermediate=intermediate*(1/n)
        # intermediate*=alpha
        # parameters=self.parameters-intermediate
        predlist=X_train.dot(self.parameters)
        loss=predlist-y_train
        gradient=X_train.T.dot(loss)/n
        self.parameters=self.parameters-(alpha*gradient)
        # print(self.parameters)


        
    def predict(self,path):
        df=pd.read_csv(path)
        n,c=df.shape
        df=df.drop(['Formatted Date', 'Daily Summary','Apparent Temperature (C)'], axis=1)
        df_dummy=pd.get_dummies(df)
        missing_cols=set(self.columns)-set(df_dummy.columns)
        # print(missing_cols)
        for c in missing_cols:
          df_dummy[c]=0
        df_dummy=df_dummy[self.columns]
        li=[1.0]*n
        # print(df)
        print(df_dummy.shape)
        scaler = StandardScaler()
        df=scaler.fit_transform(df_dummy)
        df=pd.DataFrame(df)
        df.insert(0,"const",li,True)
        # print(actual_labels.shape)
        X_test=np.array(df)
        predlist=df.dot(self.parameters)
        return predlist



model4 = Weather()
model4.train('/content/drive/My Drive/Q4/weather.csv') # Path to the train.csv will be provided 
prediction4 = model4.predict('/content/drive/My Drive/test_data/weather_test.csv') # Path to the test.csv will be provided
print(prediction4)

df1=pd.read_csv('/content/drive/My Drive/test_data/weather_test.csv')
print(df1.shape)
# df1=np.array(df1)
labels=df1['Apparent Temperature (C)']
print(labels)
mae = mean_absolute_error(labels, prediction4)
mse = mean_squared_error(labels, prediction4)
print(mae)
print(mse)
r2_score(labels,prediction4)
